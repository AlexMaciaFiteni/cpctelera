//-----------------------------LICENSE NOTICE------------------------------------
//  This file is part of CPCtelera: An Amstrad CPC Game Engine 
//  Copyright (C) 2015 ronaldo / Fremos / Cheesetea / ByteRealms (@FranGallegoBR)
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//-------------------------------------------------------------------------------

#ifndef TRANSPARENCY_TABLES_H
#define TRANSPARENCY_TABLES_H


#include <types.h>

//
// Array: cpct_transparentMaskTableM0
//
//    Look-up table (array) containing all the masks for the 256 possible combinations of
// byte pixel data values, assuming firmware colour 0 as being transparent. This table
// should be placed by users at their desired location in memory. 
//
//    It is recommended to place this table at a 256-byte aligned memory location (a memory 
// location whose Least signficant byte is 0, so the address has the form 0x??00). In fact, 
// some functions like <cpct_drawSpriteMaskedAlignedTable> require this table to be 256-byte
// aligned or they will fail.
// 
//    To be able to use this table, all you have to do is defining the contant 
// <cpct_transparentMaskTableM0_address> before the inclusion of cpctelera.h, sprites/sprites.h or 
// sprites/transparency_tables.h CPCtelera's header files. This definition is done this way:
// (start code)
//    #define cpct_transparentMaskTableM0_address 0x2100
// (end code)
//
//    With this definition, you are including <cpct_transparentMaskTableM0> in your binary
// at address 0x2100 (256-bytes aligned). You are always required to provide a concrete address
// for this table at definition time. It is recommended that you use a 256-bytes aligned 
// address.
//
//    Once the table has been defined, you can access it through the symbol <cpct_transparentMaskTableM0>.
//
// Size:
//    256 bytes
//
#ifdef cpct_transparentMaskTableM0_address
   __at(cpct_transparentMaskTableM0_address) const u8 cpct_transparentMaskTableM0[256] = {
      0xff, 0xaa, 0x55, 0x00, 0xaa, 0xaa, 0x00, 0x00, 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0xaa, 0xaa, 0x00, 0x00, 0xaa, 0xaa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x00, 0x55, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xaa, 0xaa, 0x00, 0x00, 0xaa, 0xaa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0xaa, 0xaa, 0x00, 0x00, 0xaa, 0xaa, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xaa, 0x55, 0x00, 0xaa, 0xaa,
      0xaa, 0x00, 0x00, 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0xaa, 0xaa, 0x00, 0x00, 0xaa,
      0xaa, 0xaa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xaa, 0xaa,
      0xaa, 0x00, 0x00, 0xaa, 0xaa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xaa
   };
#endif

#endif