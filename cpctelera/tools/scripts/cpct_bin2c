#!/bin/bash

##-----------------------------LICENSE NOTICE------------------------------------
##  This file is part of CPCtelera: An Amstrad CPC Game Engine 
##  Copyright (C) 2015 ronaldo / Fremos / Cheesetea / ByteRealms (@FranGallegoBR)
##
##  This program is free software: you can redistribute it and/or modify
##  it under the terms of the GNU General Public License as published by
##  the Free Software Foundation, either version 3 of the License, or
##  (at your option) any later version.
##
##  This program is distributed in the hope that it will be useful,
##  but WITHOUT ANY WARRANTY; without even the implied warranty of
##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##  GNU General Public License for more details.
##
##  You should have received a copy of the GNU General Public License
##  along with this program.  If not, see <http://www.gnu.org/licenses/>.
##------------------------------------------------------------------------------

###########################################################################
## CPCTELERA ENGINE
###########################################################################

##
## File: cpct_bin2c
##    Script for converting binary files to C arrays
##
## Usage:
##    cpct_bin2c [file] [options]
##
## Description:
##    This script converts any given binary file into a C array containing
## all the bytes of the binary in hexadecimal format. This lets you include
## any binary file inside a C program.
##
##    The converted output is outputted to the standard output.
##
## Command line options:
##    -b | --bytes-per-line [numbytes] - Establishes the number of bytes to 
## write at each array line in C. 16 by default
##    -h | --help                      - Shows help information on the terminal.
##


## Bash Include files
source $(dirname $0)/lib/bash_library.sh

## Show how this script is to be used and exit
##
function usage() {
   echo "${COLOR_LIGHT_YELLOW}USAGE"
   echo "  ${COLOR_LIGHT_BLUE}$(basename $0) ${COLOR_LIGHT_CYAN}<filename>"
   echo
   echo "${COLOR_CYAN}  Converts any given binary file into a C array containing \
all the bytes of the binary in hexadecimal format"
   echo
   echo "${COLOR_LIGHT_YELLOW}OPTIONS"
   echo 
   echo "${COLOR_LIGHT_BLUE}  -b | --bytes-per-line <numbytes>"
   echo "${COLOR_CYAN}       Establishes the number of bytes to write at each array line in C. 16 by default."
   echo ${COLOR_NORMAL}
   echo "${COLOR_LIGHT_BLUE}  -h | --help"
   echo "${COLOR_CYAN}       Shows this help information"
   echo ${COLOR_NORMAL}
   exit 1
}

##############################################################
###############################################################
## Check command line parameters
##
FILENAME=
BYTESPERLINE=16

if (( $# < 1 )); then
   usage
fi

while (( $# >= 1 )); do
   case $1 in
      ## Get number of bytes
      "-b" | "--bytes-per-line")
         if ! isInt "$2"; then
            paramError "Parameter -b must be followed by an integer representing the number of bytes to write at each C line."
         fi
         BYTESPERLINE=$((10#$2))
         shift
      ;;
      ## Show Help
      "-h" | "--help")
         usage
      ;;
      ## Get main parameter (ProjectDir)
      *)
         if isCommandLineOption "$1"; then
            paramError "Unrecognized command line option '$1'" 7
         elif ! isEmpty "$FILENAME"; then
            paramError "Unrecognized parameter '$1'. Have you already provided a <filename> parameter?" 6
         else
            EnsureExists file "$1"
         fi
         FILENAME="$1"
      ;;
   esac
   shift
done

###############################################################
###############################################################
## Read and convert file
##

## Create a temporary file to store binary conversion previous to output
TMPFILE=$(createTempFile)

## Extract the name of the file without extension as IDENTIFIER for C
IDENTIFIER=$(basename "$FILENAME") 
IDENTIFIER=${IDENTIFIER%.*}

## Calculate the total amount of bytes to be converted (in the binary file)
BYTES=$(wc -c < "$FILENAME")

## Output the C Array declaration and the number of bytes to stdout
echo "// File $FILENAME converted using cpct_bin2c"
echo "const unsigned char G_${IDENTIFIER}[${BYTES}] = {"

## Convert binary file to bytes in hexadecimal and store in a temporary file
od -An -t x1 -v "$FILENAME" > $TMPFILE

## Convert binary to C Array and output to stdout
i=1
COMMA=""
while read LINE; do
	BYTES=( $LINE )
	for B in ${BYTES[@]}; do
		printf "$COMMA"
		if (( i >= BYTESPERLINE )); then
			COMMA=",\n"
			i=0
		else
			COMMA=","
		fi
		printf " 0x%s" $B
		i=$((i+1))
	done
done < $TMPFILE

## Output end bracket and semi-colon
echo
echo "};"