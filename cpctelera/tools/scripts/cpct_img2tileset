#!/bin/bash
##-----------------------------LICENSE NOTICE------------------------------------
##  This file is part of CPCtelera: An Amstrad CPC Game Engine 
##  Copyright (C) 2015 ronaldo / Fremos / Cheesetea / ByteRealms (@FranGallegoBR)
##
##  This program is free software: you can redistribute it and/or modify
##  it under the terms of the GNU General Public License as published by
##  the Free Software Foundation, either version 3 of the License, or
##  (at your option) any later version.
##
##  This program is distributed in the hope that it will be useful,
##  but WITHOUT ANY WARRANTY; without even the implied warranty of
##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##  GNU General Public License for more details.
##
##  You should have received a copy of the GNU General Public License
##  along with this program.  If not, see <http://www.gnu.org/licenses/>.
##------------------------------------------------------------------------------

###########################################################################
## CPCTELERA ENGINE
###########################################################################

##
## File: cpct_img2tileset
##
##    Converts an image file with a set of tile or sprite images into a 
## CPCtelera C-array tileset along with arrays for all tiles/sprites.
##
## Usage:
##    <cpct_img2tileset> [options] [image_file]
##
## Requisites:
##    This scripts uses Img2CPC utility by Augusto Ruiz to convert the PNG
## file into screen pixel definitions. This requires wine and winepath to be 
## installed under Linux or MacOSX and .net framework 2.0. or greater under Windows.
##
## Description:
##    This script converts an image file containing a set of tile or sprite definitions
## of the same size into 2 files (.c and .h) ready to be passed to the C compiler 
## for inclusion into a program. 
##    By default, this script converts the image into 4x4-pixel tiles. This means that
## the script splits the whole image into 4x4-pixel individual images and converts each
## one of them into a tile. You may change sizes by using -tw / -th command line modifiers. 
##    To do the conversion, the script calls Img2CPC.exe Windows utility, which 
## reads pixels one by one and transform them into the closest colour value from the
## defined Amstrad CPC palette. If no palette is given to this script, standard
## Amstrad CPC palette is used (the one that is set when a CPC computer starts).
##    Provided image file may be a PNG, JPG, BMP, GIF or TIFF file. 
##
## Command line options:
##    -pf | --palette-firmware <palete_array> - Sets the Amstrad CPC palette 
##               to be used for the conversion as an array of firmware colour values (up to 16, 
##               in mode 0). Values must be passed inside '{' '}' and separated by spaces. 
##               Following example sets mode 1 palette to Black, white, red and green colours, 
##               to convert the file tiles.png,
##
##                        > cpct_img2tileset -m 1 -pf { 0 26 6 18 } tiles.png
##
##    -bn | --tiles-basename  <name>          - Sets the basename that will be used as C identifier 
##                                              for tiles or sprites. Default: g_tile
##    -m  | --mode <cpc_graphics_mode>        - Sets the CPC Graphics mode the output data will 
##                                              be produced for (0, 1 or 2). Default: 0.
##    -tw | --tile-width   <pixels>           - Sets the width of a tile in pixels. Default: 4.
##    -th | --tile-height  <pixels>           - Sets the height of a tile in pixels. Default: 4.
##    -h  | --help                            - Shows help information on the terminal.
##
##

## Bash Include files
source $(dirname $0)/lib/bash_library.sh

## Img2CPC utility location
IMG2CPC=${CPCT_PATH}/tools/img2cpc/Img2CPC.exe
IMG2CPC_CFG=${CPCT_PATH}/tools/img2cpc/Img2CPC.exe.config
IMG2CPC_TMP=${CPCT_PATH}/tools/img2cpc/Img2CPC.exe.config.backup
IMG2CPC_Z88DK_TMP=${CPCT_PATH}/tools/img2cpc/z88dk_asm_tmp_output.h

## Configuration 
CPCCOLOURS=(       0,0,0     0,0,128     0,0,255     128,0,0   128,0,128   128,0,255 \
                 255,0,0   255,0,128   255,0,255     0,128,0   0,128,128   0,128,255 \
               128,128,0 128,128,128 128,128,255   255,128,0 255,128,128 255,128,255 \
                 0,255,0   0,255,128   0,255,255   128,255,0 128,255,128 128,255,255 \
               255,255,0 255,255,128 255,255,255 )
PALETTE=( 1 24 20 6 26 0 2 8 10 12 14 16 18 22 24 16 )
TILES_WIDTH=4
TILES_HEIGHT=4
TILES_BASENAME=g_tile
MODE=0
WINE=wine
BASEPATH=${PWD}
## Simbols used as 'parentheses' delimiters for passing arrays as parameters
LPAR="{"
RPAR="}"

## Show how this script is to be used and exit
##
function usage() {
   echo "${COLOR_LIGHT_YELLOW}USAGE"
   echo "  ${COLOR_LIGHT_BLUE}$(basename $0) [options] <image_file>"
   echo
   echo "${COLOR_CYAN}    Converts an image file with a set of tile or sprite images into a \
CPCtelera C-array tileset along with arrays for all tiles/sprites."
   echo 
   echo "${COLOR_LIGHT_YELLOW}Requisites:"
   echo "${COLOR_CYAN}    This scripts uses Img2CPC utility by Augusto Ruiz to convert the PNG \
file into screen pixel definitions. This requires wine and winepath to be installed under Linux \
or MacOSX and .net framework 2.0. or greater under Windows."
   echo 
   echo "${COLOR_LIGHT_YELLOW}Description:"
   echo "${COLOR_CYAN}    This script converts an image file containing a set of tile or sprite \
definitions of the same size into 2 files (.c and .h) ready to be passed to the C compiler for \
inclusion into a program."
   echo "    By default, this script converts the image into 4x4-pixel tiles. This means that \
the script splits the whole image into 4x4-pixel individual images and converts each one of them \
into a tile. You may change sizes by using -tw / -th command line modifiers."
   echo "    To do the conversion, the script calls Img2CPC.exe Windows utility, which reads pixels \
one by one and transform them into the closest colour value from the defined Amstrad CPC palette. If \
no palette is given to this script, standard Amstrad CPC palette is used (the one that is set when a \
CPC computer starts)."
   echo "    Provided image file may be a PNG, JPG, BMP, GIF or TIFF file. "
   echo
   echo "${COLOR_LIGHT_YELLOW}OPTIONS"
   echo 
   echo "${COLOR_LIGHT_BLUE}  -pf | --palette-firmware <palete_array> "
   echo "${COLOR_CYAN}       Sets the Amstrad CPC palette to be used for the conversion as an array \
of firmware colour values (up to 16, in mode 0). Values must be passed inside '$LPAR' '$RPAR' and \
separated by spaces. Following example sets mode 1 palette to Black, white, red and green colours, \
to convert the file tiles.png: "
   echo
   echo "          ${COLOR_WHITE}cpct_img2tileset -m 1 -pf { 0 26 6 18 } tiles.png"
   echo
   echo "${COLOR_LIGHT_BLUE}  -bn | --tiles-basename  <name>"
   echo "${COLOR_CYAN}       Sets the basename that will be used as C identifier for tiles or sprites. Default: g_tile"
   echo "${COLOR_LIGHT_BLUE}  -m  | --mode   <cpc_graphics_mode>"
   echo "${COLOR_CYAN}       Sets the CPC Graphics mode the output data will be produced for (0, 1 or 2). Default: 0."
   echo "${COLOR_LIGHT_BLUE}  -tw | --tile-width   <pixels>"
   echo "${COLOR_CYAN}       Sets the width of a tile in pixels. Default: 4."
   echo "${COLOR_LIGHT_BLUE}  -th | --tile-height  <pixels>"
   echo "${COLOR_CYAN}       Sets the height of a tile in pixels. Default: 4."
   echo "${COLOR_LIGHT_BLUE}  -h  | --help"
   echo "${COLOR_CYAN}       Shows this help information"
   echo ${COLOR_NORMAL}
   exit 1
}


## Ensures that files are not messed up if the script fails
##
function exitCleanup() {
   ## Restore original Img2CPC config
   if [ -f "$IMG2CPC_TMP" ]; then
      echo "${COLOR_CYAN}Restoring ${COLOR_NORMAL}Img2CPC${COLOR_CYAN} config"
      mv "$IMG2CPC_TMP" "$IMG2CPC_CFG"
   fi

   ## Remove temporal files
   if [ -f "$IMG2CPC_Z88DK_TMP" ]; then
      echo "${COLOR_CYAN}Removing temporal files"
      rm "$IMG2CPC_Z88DK_TMP"
   fi
}

## Exports present palette to Img2CPC palette format
##
function exportPaletteToImg2CPC() {
   local i
   local IDX
   for (( i=0; i < ${#PALETTE[@]}-1; i++ )); do
      IDX=${PALETTE[$i]}
      printf "%s#" ${CPCCOLOURS[$IDX]}
   done
   echo ${CPCCOLOURS[${PALETTE[15]}]}
}

## Generates a new config file to be used with Img2CPC
## using present palette
##
function generateConfigForImg2CPC() {
   # First, save previous config file
   cp "$IMG2CPC_CFG" "$IMG2CPC_TMP"

#---- Config File Write starts
#-----------------------------
   cat > "$IMG2CPC_CFG" << ConfigFileDocument
<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <appSettings>
   <!-- cpct_img2tileset Generated Palette -->
   <add key="PaletteColors" value="$(exportPaletteToImg2CPC)"/>
   <!-- Palette Transparent Color Index -->
   <add key="TransparentColor" value="0"/>
 </appSettings>
</configuration>
ConfigFileDocument
#-----------------------------
#---- Config File Write ends
}

## Convert ASM Z88DK's output to CPCtelera's C arrays
##
function asm2c() {
   local IN_FILE="$1"
   local H_FILE="$2"
   local C_FILE="$3"
   local STATUS=comments
   local NUMTILES
   local TOKENS
   local TOK

   while read LINE; do
      # Tokenize LINE
      TOKENS=( $LINE )

      # Analize depending on STATUS
      case ${STATUS} in
         comments)
            if [[ "${TOKENS[0]}" == "extern" ]]; then
               STATUS=definitions
               processDefinition TOKENS[@] >> ${H_FILE}
               NUMTILES=1
            fi
         ;;
         definitions)
            if [[ "${TOKENS[0]}" == "extern" ]]; then
               processDefinition TOKENS[@] >> ${H_FILE}
               NUMTILES=$((NUMTILES + 1))
            elif [[ "${TOKENS[0]}" == "unsigned" ]]; then
               echo "extern const u8* const g_tileset [$NUMTILES];" >> ${H_FILE}
               echo "const u8* const g_tileset [$NUMTILES] = {" >> ${C_FILE}
               STATUS=tilearray_data
            else
               echo "ERROR! 'unsigned char* tiles' declaration expected after extern definitions"
               exit 1
            fi
         ;;
         tilearray_data)
            if [[ "${TOKENS[0]}" != "};" ]]; then
               echo "   "${TOKENS[@]//_DATA/} >> ${C_FILE}
            else
               echo "};" >> ${C_FILE}
               echo >> ${C_FILE}
               STATUS=asm
            fi           
         ;;
         asm)
            TOK="${TOKENS[0]##*_D}"
            TOK="${TOK:0:3}"
            if [[ ${TOK} == "ATA" ]]; then
               TOK="${TOKENS[0]//_DATA*/}"
               TOK="${TOK#._}"
               NUMTILES=$((TILES_WIDTH / 2))
               echo "const u8 ${TOK}[${NUMTILES}*${TILES_HEIGHT}] = {" >> $C_FILE
               TOK=""
               STATUS=asm_data
            fi
         ;;
         asm_data)
            if [[ "${TOKENS[0]}" == "defb" ]]; then
               # Print previous tokens with comma at the end
               if [[ "$TOK" != "" ]]; then
                  printf "   %s,\n" "${TOK}" >> "$C_FILE"
               fi

               # Clean tokens
               for ((i=1; i < ${#TOKENS[@]}; i++)); do
                  TOK=$(echo "${TOKENS[i]}" | sed 's/[^$0-9A-Fa-fx,]*//g')
                  if [[ ${TOK:0:1} == "$" ]]; then
                     if [[ ${#TOK} < 3 || ${TOK:2:1} =~ [^0-9A-Fa-f] ]]; then
                        TOK="${TOK:0:1}0${TOK:1}"
                     fi
                  fi
                  TOKENS[i]=${TOK//$/0x}
               done
               TOK=${TOKENS[@]:1}
            else
               # Print previous tokens with comma at the end
               if [[ "$TOK" != "" ]]; then
                  printf "   %s\n" "${TOK}" >> "$C_FILE"
                  printf "};\n\n" >> "$C_FILE"
               fi
               STATUS=asm
            fi           
         ;;
      esac
   done < $IN_FILE
}

## Convert a tile definition to C extern declaration
##
function processDefinition() {
   local LINE
   local BYTESWIDTH=$((TILES_WIDTH / 2))
   declare -a LINE=("${!1}")

   echo "extern const u8 ${LINE[3]/_DATA[]/[${BYTESWIDTH}*${TILES_HEIGHT}]}"
}

## Create header for .h file
##
function create_h_file_header() {
   local H_FILE=$1
   local GENFILE=$2

cat > $H_FILE <<- END_OF_HEADER
// 
// Tiles generated from file ${GENFILE}
//
END_OF_HEADER
}

## Create header for .c file
##
function create_c_file_header() {
   local C_FILE=$1
   local GENFILE=$2

cat > $C_FILE <<- END_OF_HEADER
// 
// Tile definitions generated from file ${GENFILE}
//
END_OF_HEADER

}

##############################################################
###############################################################
## Check command line parameters
##

if (( $# < 1 )); then
   usage
fi

while (( $# >= 1 )); do
   case $1 in
      ## Get a palette as an array of firmware values
      "-pf" | "--palette-firmware")
         ## Error messages
         PALETTEERROR="Parameter -pf (--palette-firmware) must be followed by an array \
            of firmware colour values (integers from 0 to 26) separated by spaces and \
            enclosed into '$LPAR' '$RPAR'. An example setting palette colours 0 to 3 could be \
            this one: $LPAR 1 20 4 5 $RPAR "
         INTEGERERROR="is not an integer value between 0 and 26. $PALETTEERROR"

         ## Set Palette to 0's
         PALETTE=( 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 )

         ## Check initial parenthesis
         shift
         NEXT=$1
         if [[ "${NEXT:0:1}" != "$LPAR" ]]; then
            paramError "$PALETTEERROR" 12
         elif (( ${#NEXT} > 1 )); then
            NEXT=${NEXT:1}
         else
            shift
            NEXT=$1
         fi

         ## Go through all palette values
         i=0
         RPAR_FOUND=0
         while (( ! RPAR_FOUND )); do
            ## Check for parenthesis first
            if (( ${#NEXT} > 1 )) && [[ "${NEXT:(-1)}" == "$RPAR" ]]; then
               RPAR_FOUND=1
               NEXT=${NEXT:0:-1}
            fi
            if [[ "$NEXT" == "$RPAR" ]]; then
               RPAR_FOUND=1
            elif isEmpty "$NEXT"; then
               paramError "Closing '$RPAR' not found while processing palette array."
            elif ! isInt "$NEXT" || (( NEXT < 0 || NEXT > 26 )); then
               paramError "'$NEXT' $INTEGERERROR" 13
            else
               ## Insert new palette element only if we have not exceeded size
               if (( i > 15 )); then
                  paramError "Palette array exceeds maximum size. It must have 16 values at most."
               fi               
               PALETTE[$i]="$NEXT"
   
               ## Move to next value
               i=$((i+1))
               shift
               NEXT="$1"
            fi
         done
      ;;
      ## Get basename for tiles
      "-bn" | "--tiles-basename")

         ## Basename for tiles must be a valid C identifier
         if isEmpty "$2"; then
            paramError "Parameter -bn (--tiles-basename) must be followed by a valid C identifier." 4
         elif [[ "${2:0:1}" =~ [^A-Za-z_] ]]; then
            paramError "Parameter -bn (--tiles-basename) must be followed by a valid C identifier, starting by an alphabetic character or '_'." 5
         elif [[ "$2" =~ .*[^0-9A-Za-z_].* ]]; then
            paramError "Parameter -bn (--tiles-basename) must be followed by a valid C identifier, only containing alphanumeric characters or '_'." 6
         fi

         TILES_BASENAME="$2"
         shift
      ;;
      ## Get tile width
      "-m" | "--mode")

         ## CPC Mode must be 0, 1 or 2
         if [[ "$2" != "0" && "$2" != "1" && "$2" != "2" ]]; then
            paramError "Parameter -m (--mode) must be followed by a valid Amstrad CPC mode (0, 1 or 2)." 7
         fi
         MODE=$2
         shift
      ;;
      ## Get tile width
      "-tw" | "--tile-width")

         ## Tile width must be an integer
         if ! isInt "$2"; then
            paramError "Parameter -tw (--tile-width) must be followed by an integer representing the width of a tile in bytes." 8
         fi
         TILES_WIDTH=$2
         shift
      ;;
      ## Get tile height
      "-th" | "--tile-height")

         ## Tile height must be an integer
         if ! isInt "$2"; then
            paramError "Parameter -th (--tile-height) must be followed by an integer representing the hieght of a tile in bytes." 9
         fi
         TILES_HEIGHT=$2
         shift
      ;;
      ## Show Help
      "-h" | "--help")
         usage
      ;;
      ## Get main parameter (filename)
      *)
         if isCommandLineOption "$1"; then
            paramError "Unrecognized command line option '$1'" 10
         elif ! isEmpty "$FILE"; then
            paramError "Unrecognized parameter '$1'. Have you already provided a <filename> parameter?" 11
         else
            EnsureExists file "$1"
         fi
         FILE="$1"
      ;;
   esac
   shift
done

## File parameter must have been passed (not empty)
if isEmpty "$FILE"; then
   paramError "A <filename> parameter is required." 12
fi

## Check Img2CPC
if [ ! -f $IMG2CPC ]; then
   Error "'$IMG2CPC' does not exist or is not readable. This file is required for cpct_img2tileset \
to work properly. Please, check CPCtelera's tools installation and ensure Img2CPC is correctly installed."
elif [ ! -x $IMG2CPC ]; then
   echo "${COLOR_LIGHT_YELLOW}WARNING:${COLOR_CYAN}"
   echo "   '$IMG2CPC' is not executable. Execution permission is required to convert images to code.${COLOR_LIGHT_CYAN}"
   echo
   askSimpleQuestion y n "Do you want this script to try to make it executable? (y/n)" ANSWER
   echo "${COLOR_NORMAL}"
   echo
   if [[ "$ANSWER" == "n" ]]; then
      paramError "'$IMG2CPC' has not been modified. This script cannot continue. Aborting. "
   fi
   echo "Changing '$IMG2CPC' execution permission... "
   if ! chmod +x "$IMG2CPC"; then
      Error "Your user has not got enough privileges to change $IMG2CPC' execution permission. Please, change it \
manually and run this script again."
   fi
elif [ -f $IMG2CPC_CFG -a ! -w $IMG2CPC_CFG ]; then
   echo "${COLOR_LIGHT_YELLOW}WARNING:${COLOR_CYAN}"
   echo "   '$IMG2CPC_CFG' is not writeable. Write permission is required to perform palette operations.${COLOR_LIGHT_CYAN}"
   echo
   askSimpleQuestion y n "Do you want this script to try to make it writeable? (y/n)" ANSWER
   echo
   echo "${COLOR_NORMAL}"
   if [[ "$ANSWER" == "n" ]]; then
      paramError "'$IMG2CPC_CFG' has not been modified. This script cannot continue. Aborting. "
   fi
   echo "Changing '$IMG2CPC_CFG' write permission... "
   if ! chmod +w "$IMG2CPC_CFG"; then
      Error "Your user has not got enough privileges to change $IMG2CPC_CFG' write permission. Please, change it \
manually and run this script again."
   fi
fi

###############################################################
###############################################################
## Convert image and compile z88dk's output assembly to 
## CPCtelera's C Array.
##

## Set a trap on EXIT signal for ensuring everything is cleaned up on exit
trap exitCleanup EXIT

## On cygwin there is no need to use wine
if checkSystem cygwin; then
   ## Do CYGWIN required stuff
   EnsureCommandAvailable cygpath "cygpath has not been found on the system, and it's required for \
running this script. Please, check cygwin installation and run this script again."
   WINE=""
   IMG2CPC_Z88DK_TMP_WINE="$(cygpath -w ${IMG2CPC_Z88DK_TMP} 2> /dev/null)" 
else
   ## Do Linux/MacOSX required stuff (wine configuration)
   EnsureCommandAvailable wine "wine has not been found on the system, and it's required for \
running this script. Please, install wine or check the installation and run this script again."
   EnsureCommandAvailable winepath "winepath has not been found on the system, and it's required \
for running this script. Please, install it or check the installation of wine and run this script \
again. On some old wine installations you may want to create an alias for winepath to the command \
'wine winepath'."
   IMG2CPC_Z88DK_TMP_WINE="$(winepath -w ${IMG2CPC_Z88DK_TMP} 2> /dev/null)" 
fi

echo
echo "${COLOR_LIGHT_YELLOW}PROCESSING FILE '${COLOR_NORMAL}$FILE${COLOR_CYAN}'"
echo

## Pass img2cpc to convert to Z88DK's ASM
echo "${COLOR_LIGHT_RED}[${COLOR_LIGHT_YELLOW}STEP 1${COLOR_LIGHT_RED}]${COLOR_LIGHT_YELLOW} ${COLOR_CYAN}Converting tiles \
to assembly code using ${COLOR_NORMAL}Img2CPC${COLOR_CYAN} (this may take a while)..."
generateConfigForImg2CPC
${WINE} ${IMG2CPC} /w=${TILES_WIDTH} /h=${TILES_HEIGHT} /o="${IMG2CPC_Z88DK_TMP_WINE}" /bn=${TILES_BASENAME} "${FILE}" &> /dev/null

## Convert ASM to C
echo "${COLOR_LIGHT_RED}[${COLOR_LIGHT_YELLOW}STEP 2${COLOR_LIGHT_RED}]${COLOR_LIGHT_YELLOW} ${COLOR_CYAN}Translating assembly \
code into ${COLOR_NORMAL}CPCtelera${COLOR_CYAN}'s C-arrays..."
H_FILE=$(filenameWithNoExt $FILE).h 
C_FILE=$(filenameWithNoExt $FILE).c
create_h_file_header "$H_FILE" "$FILE"
create_c_file_header "$C_FILE" "$FILE"
asm2c "$IMG2CPC_Z88DK_TMP" "$H_FILE" "$C_FILE"

## Cleanup everything on exiting
exitCleanup

## Success message
echo
echo "${COLOR_LIGHT_GREEN} SUCCESS!"
echo
echo "${COLOR_CYAN}Files '${COLOR_NORMAL}$C_FILE${COLOR_CYAN}' and '${COLOR_NORMAL}$H_FILE${COLOR_CYAN}' \
have been created with ${COLOR_NORMAL}CPCtelera${COLOR_CYAN}'s codification of tiles/sprites from \
'${COLOR_NORMAL}$FILE${COLOR_CYAN}'.${COLOR_NORMAL}"
echo
